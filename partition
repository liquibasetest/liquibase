    if (ddlResult.next()) {
        var newDDL = ddlResult.getColumnValue('DDL');
        snowflake.execute({ sqlText: `DROP TABLE ${inputName}` });
        snowflake.execute({ sqlText: newDDL });
    } else {
        throw new Error('Failed to retrieve the DDL.');
    }

var getDDLQuery = `
        SELECT GET_DDL('TABLE', '${inputName}') AS ddl
    `;
    var ddlResult = snowflake.execute({ sqlText: getDDLQuery }).next();

    // Step 5: Modify the obtained DDL to include PARTITION BY clause
    var ddl = ddlResult.DDL.replace('LOCATION=', 'PARTITION BY (partition_date, contxt_key_id)\nLOCATION=');
    ddl = ddl.replace(/"/g, ''); // Remove double quotes

    // Step 6: Drop the original table and recreate it with modified DDL
    snowflake.execute({ sqlText: `DROP TABLE ${inputName}` });
    snowflake.execute({ sqlText: ddl });

CREATE OR REPLACE PROCEDURE create_partitioned_external_table(
    inputName STRING,
    fileLocation STRING
)
RETURNS STRING
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS
$$
try {
    var stage = '@mystage/';
    var file_format = 'my_parquet_format';
    var location = stage + fileLocation + '/';

    // Step 1: Create the external table using INFER_SCHEMA
    var createTableSQL = `
        CREATE EXTERNAL TABLE ${inputName}
        USING TEMPLATE (
            SELECT ARRAY_AGG(OBJECT_CONSTRUCT('COLUMN_NAME',COLUMN_NAME, 'TYPE',TYPE, 'NULLABLE', NULLABLE, 'EXPRESSION',EXPRESSION))
            FROM TABLE(
                INFER_SCHEMA(
                    LOCATION=>'${location}',
                    FILE_FORMAT=>'${file_format}'
                )
            )
        )
        LOCATION='${location}'
        FILE_FORMAT='${file_format}'
        AUTO_REFRESH=false;
    `;
    snowflake.execute({ sqlText: createTableSQL });

    // Step 2: Add the first partition column
    var addFirstPartitionSQL = `
        ALTER TABLE ${inputName} ADD COLUMN partition_date STRING AS 
        SPLIT_PART(SPLIT_PART(metadata$filename, '/', 5), '=', 2);
    `;
    snowflake.execute({ sqlText: addFirstPartitionSQL });

    // Step 3: Add the second partition column
    var addSecondPartitionSQL = `
        ALTER TABLE ${inputName} ADD COLUMN contxt_key_id STRING AS 
        SPLIT_PART(SPLIT_PART(metadata$filename, '/', 6), '=', 2);
    `;
    snowflake.execute({ sqlText: addSecondPartitionSQL });

    // Step 4: Get the table DDL and modify it to include partitioning
    var getDDLQuery = `
        SELECT REPLACE(
            REPLACE(
                GET_DDL('TABLE', '${inputName}'),
                'LOCATION=', 
                'PARTITION BY (partition_date, contxt_key_id)\nLOCATION='
            ), 
            '"', 
            ''
        ) AS ddl
    `;
    var ddlResult = snowflake.execute({ sqlText: getDDLQuery }).next();

    var newDDL = ddlResult.DDL;
    snowflake.execute({ sqlText: `DROP TABLE ${inputName}` });
    snowflake.execute({ sqlText: newDDL });

    return 'Table created and partitioned successfully.';
} catch (err) {
    return 'Error: ' + err.message;
}
$$;
