CT Risk Application Migration: The CT Risk application is migrating from the ABC Legacy platform to Snowflake and exposing data in the CT Snowflake account for users for analytical purposes. Currently, the AT platform grants permissions at the schema level, and fine-grained access control is implemented using user RBAC roles. A common control table must be populated to implement the masking policy using fine-grained access control.

Since CT risk migrating to snowflake, access control needs to be implemented for the AT Risk tables in the AT platform. Currently, the AT platform grants permissions at the schema level, and fine-grained access control is implemented using user RBAC roles. A common control table must be populated to implement the masking policy using fine-grained access control.

Below are the options for POC, interim solution, and long-term solution:

Proposed Solutions
1. POC - AT Risk Utilizes the AT Control Table
Description: The AT Risk team populates the AT Control table with values for Table to PG group classification and utilizes the AT procedure to implement access control for AT Risk tables. This work is currently in progress.

Pros:

Minimal development effort compared to maintaining a separate control table.
Users can view only the field values for the table if they have access.
Cons:

Overwrite/deletion possibility where AT or AT Risk policies might overwrite each other.
Since schema-level access is granted, users can identify the number of records.
Internal PG Group column is also masked.
2. POC - AT Risk Creates a Separate Control Table
Description: The AT Risk team maintains a separate control table to populate values for Table to PG group classification and utilizes the AT procedure to implement access control for AT Risk tables.

Pros:

Users can view only the field values for the table if they have access.
No risk of overwrite/deletion on the control table.
Cons:

Since schema-level access is granted, users can identify the number of records.
Requires a 2-week development effort in CCB.
Internal PG Group column is also masked.
3. AT Risk Owns the Control Table and Access is Given Based on Table Level
Description: AT Risk maintains its own access control tables and grants access at the table level based on user RBAC roles. Different functional roles are created based on table access. For example, if a user has access to a particular RBAC role, they can access certain tables. This can be achieved with functional roles, and fine-grained access control is implemented using a stored procedure, but internal columns will not be masked.

Pros:

User access is given for tables (not per schema), preventing access to other RBAC roles.
No need to mask the internal PG classification group column.
Fine-grained access control is implemented.
Cons:

AT Risk needs to maintain Terraform and create custom functional groups for each RBAC role.
4. AT Catalog Fetches the Schema/PG Group from JADE (Long-term Solution)
Description: The AT catalog fetches JADE information and populates the AT catalog for AT Risk tables.

Pros:

Maintains a single control table for everyone.
JADE catalog is the source of information.
Cons:

Potential integration challenges or data consistency issues might arise.
